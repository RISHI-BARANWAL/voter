// VoterManagement.tsx  100% working VIP working on it too close....
import React, { useState, useEffect, useRef } from 'react';      ///....new added....
import { useLocation, useNavigate } from 'react-router-dom';
import axios from 'axios';
import toast from 'react-hot-toast';
import { useAuth } from '../contexts/AuthContext';
import {
  Plus,
  Edit,
  Trash2,
  Search,
  Filter,
  Download,
  Upload,
  Users,
  Phone,
  PhoneOff,
  // FileText,
  // Database,
  X,
  Camera,
  Image as ImageIcon,
} from 'lucide-react';

interface Voter {
  _id: string; // id: number; // 
  full_name: string;
  age?: number;
  gender?: string;
  mobile_number?: string;
  ward_area?: string;
  booth?: string;
  political_preference?: string;
  voter_id?: string;
  voter_image?: File | string;  ///....new added img 
  is_dead: boolean;
  created_at: string;
}

export default function VoterManagement() {
  const location = useLocation();
  const navigate = useNavigate();
  const { user } = useAuth();
  
  // Get current tab from URL
  const searchParams = new URLSearchParams(location.search);
  const currentTab = searchParams.get('tab') || 'entry';

  const [voters, setVoters] = useState<Voter[]>([]);
  const [loading, setLoading] = useState(true);
  const [showAddModal, setShowAddModal] = useState(false);
  const [editingVoter, setEditingVoter] = useState<Voter | null>(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [totalVoters, setTotalVoters] = useState(0);
  const [imagePreview, setImagePreview] = useState<string | null>(null); // const [imagePreview, setImagePreview] = useState('');
  const fileInputRef = useRef<HTMLInputElement | null>(null); // const fileInputRef = useRef(null);
  
  // Filters
  const [searchTerm, setSearchTerm] = useState('');
  const [genderFilter, setGenderFilter] = useState('');
  const [areaFilter, setAreaFilter] = useState('');
  const [occupationFilter, setOccupationFilter] = useState(''); //....new added
  const [casteFilter, setCasteFilter] = useState(''); //....new added
  const [boothFilter, setBoothFilter] = useState(''); //....new added
  const [mobileFilter, setMobileFilter] = useState('');
  const [ageMin, setAgeMin] = useState('');
  const [ageMax, setAgeMax] = useState('');

  // Import state
  const [importing, setImporting] = useState(false);
  const [exporting, setExporting] = useState(false);

  const [formData, setFormData] = useState<{
  full_name: string;
  age: string;
  gender: string;
  father_husband_name: string;
  house_no: string;
  category: string;
  caste: string;
  sub_caste: string;
  sub_sub_caste: string;
  ward_area: string;
  district: string;
  taluka: string;
  village: string;
  city: string;
  mobile_number: string;
  whatsapp_number: string;
  head_of_house: string;
  voter_image: string | File; // ✅ TypeScript type here
  political_preference: string;
  party_designation: string;
  occupation: string;
  occupation_subcategory: string;
  voter_id: string;
  present_in_city: boolean;
  present_city_name: string;
  date_of_birth: string;
  booth: string;
  is_dead: boolean;
}>({
    full_name: '',
    age: '',
    gender: '',
    father_husband_name: '',
    house_no: '',
    category: '',
    caste: '',
    sub_caste: '',
    sub_sub_caste: '',
    ward_area: '',
    district: '',
    taluka: '',
    village: '',
    city: '',
    mobile_number: '',
    whatsapp_number: '',
    head_of_house: '', //....new added 0
    voter_image: '', //....new added
    political_preference: '',
    party_designation: '',
    occupation: '',
    occupation_subcategory: '',
    voter_id: '',
    present_in_city: true,
    present_city_name: '',
    date_of_birth: '',
    booth: '',
    is_dead: false, //....new added
  });

  useEffect(() => {
    if (currentTab === 'entry' || currentTab === 'search') {
      fetchVoters();
    }
  }, [currentTab, currentPage, searchTerm, genderFilter, areaFilter, occupationFilter, casteFilter, boothFilter, mobileFilter, ageMin, ageMax]); ///....new added occupationFilter, areaFilter, casteFilter,

  const fetchVoters = async () => {
    try {
      setLoading(true);
      const params = new URLSearchParams({
        page: currentPage.toString(),
        limit: '20',
        ...(searchTerm && { search: searchTerm }),
        ...(genderFilter && { gender: genderFilter }),
        ...(areaFilter && { area: areaFilter }),
        ...(occupationFilter && { occupation: occupationFilter }), ///....new added
        ...(casteFilter && { caste: casteFilter }), ///....new added
        ...(boothFilter && { booth: boothFilter }), //....new added
        ...(mobileFilter && { mobile_filter: mobileFilter }),
        ...(ageMin && { age_min: ageMin }),
        ...(ageMax && { age_max: ageMax }),
      });

      const response = await axios.get(`/voters?${params}`);
      setVoters(response.data.voters || []);
      setTotalPages(response.data.totalPages || 1);
      setTotalVoters(response.data.total || 0);
    } catch (error) {
      console.error('Error fetching voters:', error);
      toast.error('Failed to fetch voters');
    } finally {
      setLoading(false);
    }
  };

  // const handleSubmit = async (e: React.FormEvent) => {
  //   e.preventDefault();
  //   try {
  //     if (editingVoter) {
  //       const response = await axios.put(`/voters/${editingVoter._id}`, formData ); 
  //       console.log('Update response:', response.data);
  //       toast.success('Voter updated successfully');
  //     } else {
  //       const response = await axios.post('/voters', formData );
  //       console.log('Create response:', response.data);
  //       toast.success('Voter created successfully');
  //     }
      
  //     fetchVoters();
  //     resetForm();
  //   } catch (error: any) {
  //     console.error('Submit error:', error);
  //     toast.error(error.response?.data?.message || 'Operation failed');
  //   }
  // };
  const handleSubmit = async (e: React.FormEvent) => {
  e.preventDefault();
  try {
    const data = new FormData();
    // Append all fields to FormData (including the image)
    for (const key in formData) {
      const value = (formData as any)[key];
      if (value !== undefined && value !== null) {
        data.append(key, value);
      }
    }

    let response;
    if (editingVoter) {
      response = await axios.put(`/voters/${editingVoter._id}`, data, {
        headers: { 'Content-Type': 'multipart/form-data' }
      });
      toast.success('Voter updated successfully');
    } else {
      response = await axios.post('/voters', data, {
        headers: { 'Content-Type': 'multipart/form-data' }
      });
      toast.success('Voter created successfully');
    }

    console.log('Response:', response.data);
    fetchVoters();
    resetForm();
  } catch (error: any) {
    console.error('Submit error:', error);
    toast.error(error.response?.data?.message || 'Operation failed');
  }
};

  const handleDelete = async (voterId: string) => {
    if (!confirm('Are you sure you want to delete this voter?')) return;
    
    try {
      await axios.delete(`/voters/${voterId}`);
      toast.success('Voter deleted successfully');
      fetchVoters();
    } catch (error) {
      toast.error('Failed to delete voter');
    }
  };

  const resetForm = () => {
    setFormData({
      full_name: '',
      age: '',
      gender: '',
      father_husband_name: '',
      house_no: '',
      category: '',
      caste: '',
      sub_caste: '',
      sub_sub_caste: '',
      ward_area: '',
      district: '',
      taluka: '',
      village: '',
      city: '',
      mobile_number: '',
      whatsapp_number: '',
      head_of_house: '',  //....new added 0
      voter_image: '',   //....new added
      political_preference: '',
      party_designation: '',
      occupation: '',
      occupation_subcategory: '',
      voter_id: '',
      present_in_city: true,
      present_city_name: '',
      date_of_birth: '',
      booth: '',
      is_dead: false, //....new added
    });
    setShowAddModal(false);
    setEditingVoter(null);
  };

  const handleImport = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    const formData = new FormData();
    formData.append('file', file);

    setImporting(true);
    try {
      const response = await axios.post('/voters/import', formData, {   //....new added.   'http://localhost:5000/api/voters/import'  or    '/voters/import'
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      toast.success(`Import completed! ${response.data.imported} voters imported, ${response.data.errors} errors`);
      if (response.data.errorDetails && response.data.errorDetails.length > 0) {
        console.log('Import errors:', response.data.errorDetails);
      }
      fetchVoters();
    } catch (error: any) {
      toast.error(error.response?.data?.message || 'Import failed');
    } finally {
      setImporting(false);
    }

    // Reset file input
    e.target.value = '';
  };

  const handleExport = async () => {
    setExporting(true);
    try {
      const response = await axios.get('/voters/export/excel', {
        responseType: 'blob',
      });

      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `voters_export_${new Date().toISOString().split('T')[0]}.xlsx`);
      document.body.appendChild(link);
      link.click();
      link.remove();
      window.URL.revokeObjectURL(url);

      toast.success('Export completed successfully');
    } catch (error: any) {
      console.error('Export error:', error);
      toast.error(error.response?.data?.message || 'Export failed');
    } finally {
      setExporting(false);
    }
  };

  const startEdit = async (voter: Voter) => {
    try {
      console.log('Starting edit for voter:', voter._id);
      setEditingVoter(voter);
      
      // Fetch full voter details for editing
      const response = await axios.get(`/voters/${voter._id}`);
      const fullVoter = response.data;
      console.log('Full voter data:', fullVoter);
      
      setFormData({
        full_name: fullVoter.full_name || '',
        age: fullVoter.age?.toString() || '',
        gender: fullVoter.gender || '',
        father_husband_name: fullVoter.father_husband_name || '',
        house_no: fullVoter.house_no || '',
        category: fullVoter.category || '',
        caste: fullVoter.caste || '',
        sub_caste: fullVoter.sub_caste || '',
        sub_sub_caste: fullVoter.sub_sub_caste || '',
        ward_area: fullVoter.ward_area || '',
        district: fullVoter.district || '',
        taluka: fullVoter.taluka || '',
        village: fullVoter.village || '',
        city: fullVoter.city || '',
        mobile_number: fullVoter.mobile_number || '',
        whatsapp_number: fullVoter.whatsapp_number || '',
        head_of_house: fullVoter.head_of_house || 0 || '', //....new added ''
        voter_image: fullVoter.voter_image || '', //....new added 
        political_preference: fullVoter.political_preference || '',
        party_designation: fullVoter.party_designation || '',
        occupation: fullVoter.occupation || '',
        occupation_subcategory: fullVoter.occupation_subcategory || '',
        voter_id: fullVoter.voter_id || '',
        present_in_city: fullVoter.present_in_city !== false,
        present_city_name: fullVoter.present_city_name || '',
        date_of_birth: fullVoter.date_of_birth ? fullVoter.date_of_birth.split('T')[0] : '',
        booth: fullVoter.booth || '',
        is_dead: fullVoter.is_dead || false, //....new added
      });
      setShowAddModal(true);
    } catch (error) {
      console.error('Error fetching voter details:', error);
      toast.error('Failed to fetch voter details');
    }
  };

  const clearFilters = () => {
    setSearchTerm('');
    setGenderFilter('');
    setAreaFilter('');
    setOccupationFilter(''); //....new added
    setCasteFilter(''); //....new added
    setBoothFilter(''); //....new added
    setMobileFilter('');
    setAgeMin('');
    setAgeMax('');
    setCurrentPage(1);
  };

  const renderDataEntry = () => (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-xl font-semibold text-gray-900">Data Entry</h2>
          <p className="text-sm text-gray-600">Add and manage voter information</p>
        </div>
        <button
          onClick={() => setShowAddModal(true)}
          className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center space-x-2 transition-colors duration-200"
        >
          <Plus className="h-5 w-5" />
          <span>Add Voter</span>
        </button>
      </div>

      {/* Basic Search */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
        <div className="flex items-center space-x-4">
          <div className="relative flex-1">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
            <input
              type="text"
              placeholder="Quick search voters..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          <button
            onClick={() => navigate('/voters?tab=search')}
            className="bg-gray-100 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-200 flex items-center space-x-2 transition-colors duration-200"
          >
            <Filter className="h-4 w-4" />
            <span>Advanced Search</span>
          </button>
        </div>
      </div>

      {renderVotersTable()}
    </div>
  );

  const renderSearch = () => (
    <div className="space-y-6">
      <div>
        <h2 className="text-xl font-semibold text-gray-900">Search & Filter</h2>
        <p className="text-sm text-gray-600">Advanced search and filtering options</p>
      </div>

      {/* Advanced Search Filters */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <h3 className="text-lg font-medium text-gray-900 mb-4">Search Filters</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
            <input
              type="text"
              placeholder="Search by name, mobile, voter ID..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          
          <select
            value={genderFilter}
            onChange={(e) => setGenderFilter(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="">All Genders</option>
            <option value="Male">Male</option>
            <option value="Female">Female</option>
            <option value="Other">Other</option>
          </select>

          <input
            type="text"
            placeholder="Area/Ward"
            value={areaFilter}
            onChange={(e) => setAreaFilter(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          />

          <input  ///....new added
            type="text"
            placeholder="Booth"
            value={boothFilter}
            onChange={(e) => setBoothFilter(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          />

          <input  ///....new added
            type="text"
            placeholder="Caste"
            value={casteFilter}
            onChange={(e) => setCasteFilter(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          />

          <input  ///....new added
            type="text"
            placeholder="Occupation"
            value={occupationFilter}
            onChange={(e) => setOccupationFilter(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          />

          <select
            value={mobileFilter}
            onChange={(e) => setMobileFilter(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="">Mobile Status</option>
            <option value="with_mobile">With Mobile</option>
            <option value="without_mobile">Without Mobile</option>
          </select>

          <input
            type="number"
            placeholder="Min Age"
            value={ageMin}
            onChange={(e) => setAgeMin(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          />

          <input
            type="number"
            placeholder="Max Age"
            value={ageMax}
            onChange={(e) => setAgeMax(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          />
        </div>

        <div className="flex items-center justify-between mt-4">
          <button
            onClick={clearFilters}
            className="text-gray-600 hover:text-gray-800 text-sm"
          >
            Clear all filters
          </button>
          <div className="text-sm text-gray-600">
            Found {totalVoters} voters
          </div>
        </div>
      </div>

      {renderVotersTable()}
    </div>
  );

  const renderImportExport = () => (
    <div className="space-y-6">
      <div>
        <h2 className="text-xl font-semibold text-gray-900">Import/Export</h2>
        <p className="text-sm text-gray-600">Import voter data from Excel/CSV or export existing data</p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Import Section */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="flex items-center space-x-3 mb-4">
            <Upload className="h-6 w-6 text-blue-600" />
            <h3 className="text-lg font-medium text-gray-900">Import Data</h3>
          </div>
          
          <div className="space-y-4">
            <div>
              <p className="text-sm text-gray-600 mb-2">
                Upload Excel (.xlsx, .xls) or CSV files with voter data
              </p>
              <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                <input
                  type="file"
                  id="import-file"
                  accept=".xlsx,.xls,.csv"
                  onChange={handleImport}
                  className="hidden"
                  disabled={importing}
                />
                <button 
                  onClick={() => document.getElementById('import-file')?.click()}
                  disabled={importing}
                  className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center space-x-2 mx-auto transition-colors duration-200"
                >
                  {importing ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                      <span>Importing...</span>
                    </>
                  ) : (
                    <>
                      <Upload className="h-4 w-4" />
                      <span>Choose File</span>
                    </>
                  )}
                </button>
              </div>
            </div>

            <div className="text-xs text-gray-500">
              <p className="font-medium mb-1">Supported columns:</p>
              <ul className="list-disc list-inside space-y-1">
                <li>Full Name, Age, Gender</li>
                <li>Father/Husband Name, Mobile Number</li>
                <li>Ward/Area, Booth, District</li>
                <li>Political Preference, Occupation</li>
                <li>Voter ID, House Number</li>
              </ul>
            </div>
          </div>
        </div>

        {/* Export Section */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="flex items-center space-x-3 mb-4">
            <Download className="h-6 w-6 text-green-600" />
            <h3 className="text-lg font-medium text-gray-900">Export Data</h3>
          </div>
          
          <div className="space-y-4">
            <p className="text-sm text-gray-600">
              Download all voter data as an Excel file
            </p>
            
            <div className="bg-gray-50 rounded-lg p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-900">All Voters Data</p>
                  <p className="text-xs text-gray-500">Excel format (.xlsx)</p>
                </div>
                <button 
                  onClick={handleExport}
                  disabled={exporting}
                  className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 disabled:opacity-50 flex items-center space-x-2 transition-colors duration-200"
                >
                  {exporting ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                      <span>Exporting...</span>
                    </>
                  ) : (
                    <>
                      <Download className="h-4 w-4" />
                      <span>Export</span>
                    </>
                  )}
                </button>
              </div>
            </div>

            <div className="text-xs text-gray-500">
              <p className="font-medium mb-1">Export includes:</p>
              <ul className="list-disc list-inside space-y-1">
                <li>All voter personal information</li>
                <li>Contact details and addresses</li>
                <li>Political preferences and booth info</li>
                <li>Creation date and user info</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  const renderVotersTable = () => {
    if (loading) {
      return (
        <div className="flex items-center justify-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
        </div>
      );
    }

    return (
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"> 
                  Photo
                </th>  {/* ///....new added img */}
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Voter Details
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Demographics
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Contact
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Location
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Political
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {voters.map((voter) => (
                <tr key={voter._id} className="hover:bg-gray-50">
                  
                  <td className="px-6 py-4 whitespace-nowrap"> {/* ///....new added img */}
                    <div className="flex-shrink-0 h-12 w-12">
                      {voter.voter_image ? (
                        <img
                          className="h-12 w-12 rounded-full object-cover border-2 border-gray-200"
                          src={`${axios.defaults.baseURL || ''}${voter.voter_image}`}
                          alt={voter.full_name}
                          onError={(e) => {
                            const img = e.target as HTMLImageElement;
                            img.style.display = 'none';
                            // img.nextElementSibling!.className = "h-12 w-12 rounded-full bg-gray-100 flex items-center justify-center border-2 border-gray-200";
                          }}
                        />
                      ) : (
                        <div className="h-12 w-12 rounded-full bg-gray-100 flex items-center justify-center border-2 border-gray-200">
                          <ImageIcon className="h-6 w-6 text-gray-400" />
                        </div>
                      )}
                    </div>
                  </td>{/* ///....new added img */}

                  <td className="px-6 py-4 whitespace-nowrap">
                    <div>
                      <div className="text-sm font-medium text-gray-900">
                        {voter.full_name}
                      </div>
                      <div className="text-sm text-gray-500">
                        ID: {voter.voter_id || voter._id.slice(-6)}
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm text-gray-900">
                      {voter.gender || 'N/A'}, {voter.age || 'N/A'} years
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      {voter.mobile_number ? (
                        <>
                          <Phone className="h-4 w-4 text-green-500 mr-1" />
                          <span className="text-sm text-gray-900">{voter.mobile_number}</span>
                        </>
                      ) : (
                        <>
                          <PhoneOff className="h-4 w-4 text-red-500 mr-1" />
                          <span className="text-sm text-gray-500">No mobile</span>
                        </>
                      )}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm text-gray-900">{voter.ward_area || 'N/A'}</div>
                    <div className="text-sm text-gray-500">Booth: {voter.booth || 'N/A'}</div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                      voter.political_preference === 'BJP' ? 'bg-orange-100 text-orange-800' :
                      voter.political_preference === 'Congress' ? 'bg-blue-100 text-blue-800' :
                      voter.political_preference === 'AAP' ? 'bg-green-100 text-green-800' :
                      'bg-gray-100 text-gray-800'
                    }`}>
                      {voter.political_preference || 'Neutral'}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <div className="flex items-center space-x-2">
                      <button
                        onClick={() => startEdit(voter)}
                        className="text-blue-600 hover:text-blue-900"
                        title="Edit voter"
                      >
                        <Edit className="h-4 w-4" />
                      </button>
                      <button
                        onClick={() => handleDelete(voter._id)}
                        className="text-red-600 hover:text-red-900"
                        title="Delete voter"
                      >
                        <Trash2 className="h-4 w-4" />
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {voters.length === 0 && (
          <div className="text-center py-12">
            <Users className="mx-auto h-12 w-12 text-gray-400" />
            <h3 className="mt-2 text-sm font-medium text-gray-900">No voters found</h3>
            <p className="mt-1 text-sm text-gray-500">
              {currentTab === 'search' ? 'Try adjusting your search filters.' : 'Get started by adding a new voter.'}
            </p>
          </div>
        )}

        {/* Pagination */}
        {totalPages > 1 && (
          <div className="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200">
            <div className="flex-1 flex justify-between sm:hidden">
              <button
                onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
                disabled={currentPage === 1}
                className="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50"
              >
                Previous
              </button>
              <button
                onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
                disabled={currentPage === totalPages}
                className="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50"
              >
                Next
              </button>
            </div>
            <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
              <div>
                <p className="text-sm text-gray-700">
                  Showing page <span className="font-medium">{currentPage}</span> of{' '}
                  <span className="font-medium">{totalPages}</span> ({totalVoters} total voters)
                </p>
              </div>
              <div>
                <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px">
                  <button
                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
                    disabled={currentPage === 1}
                    className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50"
                  >
                    Previous
                  </button>
                  <button
                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
                    disabled={currentPage === totalPages}
                    className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50"
                  >
                    Next
                  </button>
                </nav>
              </div>
            </div>
          </div>
        )}
      </div>
    );
  };
  ///....new added
  const castes=['पडवाशी यादव', 'तेलगू', 'कोहळे', 'पटळे', 'भडभुंजे', 'भावसार', 'कुंभार', 'माळी', 'बंजारा', 'कुणबी', 'बौद्ध', 'आदिवासी', 'MIM', 'मराठा', 'तेली', 'धनगर', 'मुस्लिम', 'गुलाल', 'बालजदूर', 'कोळी', 'गोपाल', 'पटारी', 'गोसावी', 'कोष्ट्टी', 'मनवार', 'बेलदार', 'जव्हार', 'वरटी', 'खाती', 'डाबी', 'मुळ्याची', 'भटारी', 'बगर', 'वळागोळी', 'गंगपुत्र', 'शिंपकाली', 'भाटी', 'भोई', 'चिमणी', 'पिलाजी', 'पिकलकर', 'शिंपी', 'केंजोळी', 'देवार', 'वाटेकर', 'राऊत', 'देसाई', 'शिराळकर', 'देवकाले', 'मुळगावती', 'पडवी', 'कांदेवाडी', 'भंडारी', 'प्रभाकर', 'भुजबळ', 'सुतार', 'मन्यारवाडी', 'राजपुत', 'बिलावती', 'केकाटी', 'कंदोळी', 'सरदेशी', 'चांगदेव', 'पांडवाळे', 'चाटीया', 'मारवाडी', 'मोतानी', 'कासवारी', 'केळी', 'धोबी', 'बालेदार', 'गवळी', 'तोळवेरी', 'सरपोळी', 'लांबुजणे', 'वाणी', 'हातेळी', 'संपलेरी', 'सातव', 'तांब्यावळकर', 'मोरेगांव', 'लोणार', 'सोळकर', 'मोरे', 'भांडारकर', 'कालवार', 'चाळके', 'पवार', 'पिळापूर', 'जोशी', 'तोंडली', 'माळवे', 'मनुजुरी', 'सोनबावडे', 'बापुडकर', 'मनसुने', 'कुंभारे', 'पिळे', 'बांडगे', 'दोचकी'];

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold text-gray-900">Voter Management</h1>
        <div className="text-sm text-gray-500">
          Current tab: {currentTab}
        </div>
      </div>

      {/* Tab Content */}
      {currentTab === 'entry' && renderDataEntry()}
      {currentTab === 'search' && renderSearch()}
      {currentTab === 'import' && renderImportExport()}

      {/* Add/Edit Voter Modal */}
      {showAddModal && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-auto w-full z-50">. {/* h-full ....new added */}
          <div className="relative top-20 mx-auto p-5 border w-full max-w-4xl shadow-lg rounded-md bg-white">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-900">
                {editingVoter ? 'Edit Voter' : 'Add New Voter'}
              </h3>
              <button
                onClick={resetForm}
                className="text-gray-400 hover:text-gray-600"
              >
                ×
              </button>
            </div>

            <form onSubmit={handleSubmit} className="space-y-6">
              {/* Image Upload Section */}
<div>
  <h4 className="text-md font-medium text-gray-900 mb-3">Voter Photo</h4>
  <div className="flex items-start space-x-4">
    
    {/* Preview or placeholder */}
    <div className="flex-shrink-0">
      {imagePreview ? (
        <div className="relative">
          <img
            src={imagePreview}
            alt="Preview"
            className="h-24 w-24 rounded-lg object-cover border-2 border-gray-200 shadow-sm"
          />
          <button
            type="button"
            onClick={() => {
              setFormData((prev) => ({ ...prev, voter_image: '' }));
              setImagePreview('');
              fileInputRef.current && (fileInputRef.current.value = ""); // fileInputRef.current.value = null or "";
            }}
            className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 shadow hover:bg-red-600 transition"
          >
            <X className="h-3 w-3" />
          </button>
        </div>
      ) : (
        <div
          onClick={() => fileInputRef.current?.click()}
          className="h-24 w-24 rounded-lg bg-gray-100 flex items-center justify-center border-2 border-dashed border-gray-300 cursor-pointer hover:bg-gray-200 transition"
        >
          <Camera className="h-8 w-8 text-gray-400" />
        </div>
      )}
    </div>

    {/* Upload button */}
    <div className="flex-1 mt-6">
      <input
        type="file"
        accept="image/*"
        ref={fileInputRef}
        onChange={(e) => {
          const file = e.target.files?.[0];
          if (file) {
            setFormData((prev) => ({ ...prev, voter_image: file }));  //....new added IMG needs to work File
            const reader = new FileReader();
            reader.onloadend = () => {
              if (typeof reader.result === 'string' || reader.result === null) {
                setImagePreview(reader.result);
              }
            };
            reader.readAsDataURL(file);
          }
        }}
        className="hidden"
      />
      <button
        type="button"
        onClick={() => fileInputRef.current?.click()}
        className="inline-flex items-center gap-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 focus:ring-2 focus:ring-blue-400 transition-all"
      >
        <Upload className="h-4 w-4" />
        <span>Upload Photo</span>
      </button>
      <p className="text-xs text-gray-500 mt-1">JPEG, PNG, GIF up to 5MB</p>
    </div>
  </div>
</div> {/* ///....new added */}

              {/* Personal Information */}
              <div>
                <h4 className="text-md font-medium text-gray-900 mb-3">Personal Information</h4>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Full Name *
                    </label>
                    <input
                      type="text"
                      required
                      value={formData.full_name}
                      onChange={(e) => setFormData({...formData, full_name: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Age
                    </label>
                    <input
                      type="number"
                      value={formData.age}
                      onChange={(e) => setFormData({...formData, age: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Gender
                    </label>
                    <select
                      value={formData.gender}
                      onChange={(e) => setFormData({...formData, gender: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    >
                      <option value="">Select Gender</option>
                      <option value="Male">Male</option>
                      <option value="Female">Female</option>
                      <option value="Other">Other</option>
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Father/Husband Name
                    </label>
                    <input
                      type="text"
                      value={formData.father_husband_name}
                      onChange={(e) => setFormData({...formData, father_husband_name: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Date of Birth
                    </label>
                    <input
                      type="date"
                      value={formData.date_of_birth}
                      onChange={(e) => setFormData({...formData, date_of_birth: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Voter ID
                    </label>
                    <input
                      type="text"
                      value={formData.voter_id}
                      onChange={(e) => setFormData({...formData, voter_id: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                </div>
              </div>

              {/* Contact Information */}
              <div>
                <h4 className="text-md font-medium text-gray-900 mb-3">Contact Information</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Mobile Number
                    </label>
                    <input
                      type="tel"
                      value={formData.mobile_number}
                      onChange={(e) => setFormData({...formData, mobile_number: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      WhatsApp Number
                    </label>
                    <input
                      type="tel"
                      value={formData.whatsapp_number}
                      onChange={(e) => setFormData({...formData, whatsapp_number: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                </div>
              </div>

              {/* Address Information */}
              <div>
                <h4 className="text-md font-medium text-gray-900 mb-3">Address Information</h4>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      House Number
                    </label>
                    <input
                      type="text"
                      value={formData.house_no}
                      onChange={(e) => setFormData({...formData, house_no: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Ward/Area
                    </label>
                    <input
                      type="text"
                      value={formData.ward_area}
                      onChange={(e) => setFormData({...formData, ward_area: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>

                  <div>  {/* /// */}
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Village
                    </label>
                    <input
                      type="text"
                      value={formData.village}
                      onChange={(e) => setFormData({...formData, village: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Booth
                    </label>
                    <input
                      type="text"
                      value={formData.booth}
                      onChange={(e) => setFormData({...formData, booth: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      City
                    </label>
                    <input
                      type="text"
                      value={formData.city}
                      onChange={(e) => setFormData({...formData, city: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      District
                    </label>
                    <input
                      type="text"
                      value={formData.district}
                      onChange={(e) => setFormData({...formData, district: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Taluka /Tahsil
                    </label>
                    <input
                      type="text"
                      value={formData.taluka}
                      onChange={(e) => setFormData({...formData, taluka: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                </div>
              </div>

              {/* Political & Other Information */}
              <div>
                <h4 className="text-md font-medium text-gray-900 mb-3">Political & Other Information</h4>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Political Preference
                    </label>
                    <select
                      value={formData.political_preference}
                      onChange={(e) => setFormData({...formData, political_preference: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    >
                      <option value="">Select Party</option>
                      <option value="BJP">BJP</option>
                      <option value="Congress">Congress</option>
                      <option value="AAP">AAP</option>
                      <option value="Neutral">Neutral</option>
                    </select>
                  </div>

                  <div>  {/* /// */}
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Party Designation
                    </label>
                    <select
                      value={formData.party_designation}
                      onChange={(e) => setFormData({...formData, party_designation: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    >
                      <option value="">Select Party</option>
                      <option value="BJP">BJP</option>
                      <option value="Congress">Congress</option>
                      <option value="AAP">AAP</option>
                      <option value="Neutral">Neutral</option>
                    </select>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Head of Family
                    </label>
                    <input
                      type="text"
                      value={formData.head_of_house}
                      onChange={(e) => setFormData({...formData, head_of_house: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Occupation
                    </label>
                    <input
                      type="text"
                      value={formData.occupation}
                      onChange={(e) => setFormData({...formData, occupation: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                  {/* <div>   
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Occupation
                    </label>
                    <select
                      value={formData.occupation}
                      onChange={(e) => setFormData({...formData, occupation: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    >
                      <option value="">Select</option>
                      <option value="b">Bussines</option>
                      <option value="work">Worker</option>
                      <option value="govt">Govt Employee</option>
                      <option value="self">Self Employed</option>
                      <option value="student">Student</option>
                      <option value="other">Other</option>
                    </select>
                  </div> */}

                  <div>  {/* /// */}
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Occupation Subcategory
                    </label>
                    <select
                      value={formData.occupation_subcategory}
                      onChange={(e) => setFormData({...formData, occupation_subcategory: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    >
                      <option value="">Select</option>
                      <option value="b">Bussines</option>
                      <option value="work">Worker</option>
                      <option value="govt">Govt Employee</option>
                      <option value="self">Self Employed</option>
                      <option value="student">Student</option>
                      <option value="other">Other</option>
                    </select>
                  </div>

                  <div>  {/* /// */}
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Category
                    </label>
                    <select
                      value={formData.category}
                      onChange={(e) => setFormData({...formData, category: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    >
                      <option value="">Select Category</option>
                      <option value="general">General</option>
                      <option value="st">St</option>
                      <option value="sc">SC</option>
                      <option value="obc">OBC</option>
                      <option value="ews">EWS</option>
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Caste
                    </label>
                    <select
                      value={formData.caste}
                      onChange={(e) => setFormData({...formData, caste: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    >
                      <option value="">Select Caste</option>
                      {/* <option value="पटळे">पटळे</option>  ///....new added */}   
                      {castes.map((caste, i) => (
                        <option key={i} value={caste}> {caste} </option>
                      ))}
                      <option value="other">Other</option>
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Sub Caste
                    </label>
                    <input
                      type="text"
                      value={formData.sub_caste}
                      onChange={(e) => setFormData({...formData, sub_caste: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Sub Sub Caste
                    </label>
                    <input
                      type="text"
                      value={formData.sub_sub_caste}
                      onChange={(e) => setFormData({...formData, sub_sub_caste: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Present City
                    </label>
                    <select
                      value={formData.present_in_city.toString()} // convert boolean → string for UI
                      onChange={(e) =>
                        setFormData({
                          ...formData,
                          present_in_city: e.target.value === "true" // convert string → boolean for state
                        })
                      }
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    >
                      <option value="">Select</option>
                      <option value="true">Yes</option>
                      <option value="false">No</option>
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Present City Name
                    </label>
                    <input
                      type="text"
                      value={formData.present_city_name}
                      onChange={(e) => setFormData({...formData, present_city_name: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Is Dead
                    </label>
                    <select
                      value={formData.is_dead.toString()} // convert boolean → string for UI
                      onChange={(e) =>
                        setFormData({
                          ...formData,
                          is_dead: e.target.value === "true" // convert string → boolean for state
                        })
                      }
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    >
                      <option value="">Select</option>
                      <option value="true">Yes</option>
                      <option value="false">No</option>
                    </select>
                  </div>

                </div>
              </div>

              <div className="flex items-center justify-end space-x-3 pt-4">
                <button
                  type="button"
                  onClick={resetForm}
                  className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors duration-200"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  disabled={!formData.full_name.trim() }
                  className="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 transition-colors duration-200"
                >
                  { editingVoter ? 'Update Voter' : 'Create Voter' }
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}



























// routes/voters.js
import express from 'express';    ///....new added
import { Voter, AuditLog } from '../models/index.js';
import { authenticateToken, authorizeRoles } from '../middleware/auth.js';
import { v4 as uuidv4 } from 'uuid';
import multer from 'multer';
import XLSX from 'xlsx'; //....new added
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const router = express.Router();

// New config for voter image uploads
const imageStorage = multer.diskStorage({
  destination: function (req, file, cb) {
    const uploadPath = path.join(__dirname, "../uploads");
    if (!fs.existsSync(uploadPath)) fs.mkdirSync(uploadPath, { recursive: true });
    cb(null, uploadPath);
  },
  filename: function (req, file, cb) {
    const originalName = path.parse(file.originalname).name.replace(/\s+/g, "_");
    const timestamp = Date.now();
    const extension = path.extname(file.originalname);
    const newFilename = `${originalName}_${timestamp}${extension}`;
    cb(null, newFilename);
  },
});
const imageUpload = multer({ storage: imageStorage }); // Use this for image uploads only

// Configure multer for xlsx file uploads
const storage = multer.memoryStorage(); // ✅ Stores file in memory as buffer.     //....new added     imp

const upload = multer({
  storage,
  fileFilter: (req, file, cb) => {
    const allowedTypes = [".xlsx", ".xls", ".csv"];
    const ext = path.extname(file.originalname).toLowerCase();
    if (allowedTypes.includes(ext)) {
      cb(null, true);
    } else {
      cb(new Error("Only Excel and CSV files are allowed"));
    }
  },
});

// Get all voters with pagination and filtering
router.get("/", authenticateToken, async (req, res) => {
  try {
    const {
      page = 1,
      limit = 50,
      search,
      gender,
      area,
      booth,
      age_min,
      age_max,
      mobile_filter,
      caste,  ///....new added
      occupation,  ///....new added
      is_dead,
    } = req.query;

    const skip = (page - 1) * limit;
    const query = {};

    if (search) {
      query.$or = [
        { full_name: { $regex: search, $options: "i" } },
        { father_husband_name: { $regex: search, $options: "i" } },  ///....new added change
        { mobile_number: { $regex: search, $options: "i" } },
        { voter_id: { $regex: search, $options: "i" } },
      ];
    }

    if (gender) query.gender = gender;
    if (area) query.ward_area = { $regex: area, $options: "i" };
    if (booth) query.booth = { $regex: booth, $options: "i" };  ///....new added
    if (caste) query.caste = { $regex: caste, $options: "i" };  ///....new added
    if (occupation) query.occupation = { $regex: occupation, $options: "i" };   ///....new added
    if (age_min || age_max) {
      query.age = {};
      if (age_min) query.age.$gte = parseInt(age_min);
      if (age_max) query.age.$lte = parseInt(age_max);
    }
    if (is_dead !== undefined) query.is_dead = is_dead === "true";

    if (mobile_filter === "with_mobile") {
      query.mobile_number = { $exists: true, $ne: "", $ne: null };
    } else if (mobile_filter === "without_mobile") {
      query.$or = [
        { mobile_number: { $exists: false } },
        { mobile_number: "" },
        { mobile_number: null },
      ];
    }

    const [voters, total] = await Promise.all([
      Voter.find(query)
        .populate("created_by", "full_name")
        .sort({ createdAt: -1 })
        .skip(skip)
        .limit(parseInt(limit)),
      Voter.countDocuments(query),
    ]);

    res.json({
      voters,
      total,
      page: parseInt(page),
      totalPages: Math.ceil(total / limit),
    });
  } catch (error) {
    console.error("Error fetching voters:", error);
    res.status(500).json({ message: "Server error", error: error.message });
  }
});

// Get single voter by ID
router.get("/:id", authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;

    // Validate ObjectId format
    if (!id.match(/^[0-9a-fA-F]{24}$/)) {
      return res.status(400).json({ message: "Invalid voter ID format" });
    }

    const voter = await Voter.findById(id).populate("created_by", "full_name");

    if (!voter) {
      return res.status(404).json({ message: "Voter not found" });
    }

    res.json(voter);
  } catch (error) {
    console.error("Error fetching voter:", error);
    res.status(500).json({ message: "Server error", error: error.message });
  }
});

// Create voter using thing route  //....new added IMG
router.post("/", authenticateToken, imageUpload.single("voter_image"), async (req, res) => {  // router.post("/", authenticateToken, async (req, res) => {
  try {
    const voterData = { ...req.body };

    // Generate family ID if head of house
    if (voterData.head_of_house === 1 || voterData.head_of_house === "1") {
      voterData.family_id = uuidv4();
    } else if (voterData.house_no) {
      // Find existing family ID for same house number
      const existingFamily = await Voter.findOne({
        house_no: voterData.house_no,
        head_of_house: 1,
      });
      if (existingFamily) {
        voterData.family_id = existingFamily.family_id;
      }
    }

    voterData.created_by = req.user._id;

// ✅ Save uploaded image filename
if (req.file) { //....new added IMG
  voterData.voter_image = req.file.filename;
}

    const voter = await Voter.create(voterData);

    // Log audit
    await AuditLog.create({
      user_id: req.user._id,
      action: "CREATE_VOTER",
      table_name: "voters",
      record_id: voter._id.toString(),
      new_values: voterData,
    });

    res.status(201).json({
      message: "Voter created successfully",
      voterId: voter._id,
      voter,
    });
  } catch (error) {
    console.error("Error creating voter:", error);
    res.status(500).json({ message: "Server error", error: error.message });
  }
});

// Update voter using thing route  //....new added IMG
router.put("/:id", authenticateToken, imageUpload.single("voter_image"), async (req, res) => {  // router.put("/:id", authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    const updateData = { ...req.body };

    // Validate ObjectId format
    if (!id.match(/^[0-9a-fA-F]{24}$/)) {
      return res.status(400).json({ message: "Invalid voter ID format" });
    }

    const oldVoter = await Voter.findById(id);
    if (!oldVoter) {
      return res.status(404).json({ message: "Voter not found" });
    }

    // ✅ Attach uploaded image file if present
    if (req.file) {
      updateData.voter_image = req.file.filename;
      // Optional: delete old image if exists
      if (oldVoter.voter_image) {
        const oldImagePath = path.join(__dirname, "../uploads", oldVoter.voter_image);
        if (fs.existsSync(oldImagePath)) {
          fs.unlinkSync(oldImagePath);
        }
      }
    }

    // Remove empty strings and convert age to number if provided
    Object.keys(updateData).forEach((key) => {
      if (updateData[key] === "") {
        updateData[key] = null;
      }
      if (key === "age" && updateData[key]) {
        updateData[key] = parseInt(updateData[key]);
      }
      if (key === "head_of_house") {
        updateData[key] = parseInt(updateData[key]) || 0;
      }
      if (key === "present_in_city") {
        updateData[key] =
          updateData[key] === true || updateData[key] === "true";
      }
    });

    console.log('Updating voter with ID:', id);  
    console.log('Update data:', updateData);

    const voter = await Voter.findByIdAndUpdate(id, updateData, {
      new: true,
    }).populate("created_by", "full_name");

    if (!voter) {
      return res.status(404).json({ message: "Voter not found after update" });
    }

    // Log audit
    await AuditLog.create({
      user_id: req.user._id,
      action: "UPDATE_VOTER",
      table_name: "voters",
      record_id: id,
      old_values: oldVoter.toObject(),
      new_values: updateData,
    });

    console.log("Voter updated successfully:", voter._id);

    res.json({
      message: "Voter updated successfully",
      voter,
    });
  } catch (error) {
    console.error("Error updating voter:", error);
    res.status(500).json({ message: "Server error", error: error.message });
  }
});

// Delete voter
router.delete("/:id", authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;

    const voter = await Voter.findById(id);
    if (!voter) {
      return res.status(404).json({ message: "Voter not found" });
    }

    await Voter.findByIdAndDelete(id);

    // Log audit
    await AuditLog.create({
      user_id: req.user._id,
      action: "DELETE_VOTER",
      table_name: "voters",
      record_id: id,
      old_values: voter.toObject(),
    });

    res.json({ message: "Voter deleted successfully" });
  } catch (error) {
    console.error("Error deleting voter:", error);
    res.status(500).json({ message: "Server error", error: error.message });
  }
});

// Get family members
router.get("/family/:familyId", authenticateToken, async (req, res) => {
  try {
    const { familyId } = req.params;

    const familyMembers = await Voter.find({ family_id: familyId }).sort({
      head_of_house: -1,
      age: -1,
    });

    res.json(familyMembers);
  } catch (error) {
    console.error("Error fetching family members:", error);
    res.status(500).json({ message: "Server error", error: error.message });
  }
});

// Import voters from Excel/CSV (Admin/Super Admin only)
router.post('/import', authenticateToken, authorizeRoles('Super Admin', 'Admin'), upload.single('file'), async (req, res) => {
  try {
    if (!req.file || !req.file.buffer) {  //....new added  || !req.file.buffer
      return res.status(400).json({ message: 'No file uploaded or invalid format' });
    }

    const filePath = req.file.path;    ///
    const ext = path.extname(req.file.originalname).toLowerCase();
    
    let data = [];
    
    if (ext === '.csv') {
      // Handle CSV files
      const csvData = fs.readFileSync(filePath, 'utf8');     ///
      const lines = csvData.split('\n');
      const headers = lines[0].split(',').map(h => h.trim().replace(/"/g, '').toLowerCase());  //....new added  .toLowerCase()
      
      for (let i = 1; i < lines.length; i++) {
        if (lines[i].trim()) {
          const values = lines[i].split(',').map(v => v.trim().replace(/"/g, ''));
          const row = {};
          // headers.forEach((header, index) => {
          //   row[header] = values[index] || '';
          // });
          headers.forEach((header, index) => { //....new added
            row[header] = values[index] !== undefined ? values[index] : '';
          });

          data.push(row);
        }
      }
    } else {
      // Handle Excel files
      const XLSX = await import('xlsx');   
      // const workbook = XLSX.readFile(filePath);
      const workbook = XLSX.read(req.file.buffer, { type: 'buffer' }); //....new added
      if (!workbook.SheetNames || workbook.SheetNames.length === 0) {
        return res.status(400).json({ message: 'Invalid Excel file: No sheets found' });
      } //....new added
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      data = XLSX.utils.sheet_to_json(worksheet, { defval: '' });  //....new added  , { defval: '' }
      // res.status(200).json({ message: 'Voters imported successfully', data });  ///....new added
    }

      const importedVoters = [];
      const errors = [];

    for (let i = 0; i < data.length; i++) {
      try {
        const row = data[i];
        
        // Map Excel/CSV columns to database fields. //....new added
        const voterData = {
          full_name: row['Full Name'] || row['full_name'] || row['Name'] || '',
          age: parseInt(row['Age'] || row['age']) || null,
          gender: row['Gender'] || row['gender'] || '',
          father_husband_name: row['Father/Husband Name'] || row['father_husband_name'] || row['Father Name'] || '',
          house_no: row['House No'] || row['house_no'] || row['House Number'] || '',
          category: row['Category'] || row['category'] || '',  //....new added
          caste: row['Caste'] || row['caste'] || '',  //....new added
          sub_caste: row['Sub Caste'] || row['sub_caste'] || '', //....new added
          sub_sub_caste: row['Sub Sub Caste'] || row['sub_sub_caste'] || '', //....new added
          ward_area: row['Ward/Area'] || row['ward_area'] || row['Area'] || '',
          district: row['District'] || row['district'] || '',
          taluka: row['Taluka'] || row['taluka'] || '',
          village: row['Village'] || row['village'] || '',
          city: row['City'] || row['city'] || '',
          mobile_number: row['Mobile Number'] || row['mobile_number'] || row['Mobile'] || '',
          whatsapp_number: row['WhatsApp Number'] || row['whatsapp_number'] || row['WhatsApp'] || '',
          head_of_house: parseInt(row['Head of House'] || row['head_of_house']) || 0 || '',  //....new added
          voter_image: row['Voter Image'] || row['voter_image'] || '',  //....new added
          political_preference: row['Political Preference'] || row['political_preference'] || row['Party'] || '',
          party_designation: row['Party Designation'] || row['party_designation'] || '',  //....new added
          occupation: row['Occupation'] || row['occupation'] || '',
          occupation_subcategory: row['Occupation Subcategory'] || row['occupation_subcategory'] || '',  //....new added
          voter_id: row['Voter ID'] || row['voter_id'] || row['ID'] || '',
          present_in_city: row['Present in City']?.toLowerCase?.() === 'no' ? false : true,  //....new added
          present_city_name: row['Present City Name'] || row['present_city_name'] || '',  //....new added
          date_of_birth: row['Date of Birth'] ? new Date(row['Date of Birth']) : null,  //....new added dob
          booth: row['Booth'] || row['booth'] || '',
          // caste: row['Caste'] || row['caste'] || '',
          // category: row['Category'] || row['category'] || '',
          is_dead: row['Is Dead']?.toLowerCase?.() === 'yes' ? true : false,  //....new added
          // family_id: row['Family ID'] || uuidv4(),  //....new added
          created_by: req.user._id,
          // head_of_house: parseInt(row['Head of House'] || row['head_of_house']) || 0
        };

          // Skip empty rows
          if (!voterData.full_name) continue;

          // Generate family ID if head of house
          if (voterData.head_of_house === 1) {
            voterData.family_id = uuidv4();
          }

          const voter = await Voter.create(voterData);
          importedVoters.push(voter);
        } catch (error) {
          errors.push({
            row: i + 1,
            error: error.message,
            data: data[i],
          });
        }
      }

    // Clean up uploaded file
    // fs.unlinkSync(filePath);      //.... check

      // Log audit
      await AuditLog.create({
        user_id: req.user._id,
        action: "IMPORT_VOTERS",
        table_name: "voters",
        new_values: {
          imported_count: importedVoters.length,
          error_count: errors.length,
          filename: req.file.originalname,
        },
      });

    res.json({     ///
      message: 'Import completed',
      imported: importedVoters.length,
      errors: errors.length,
      errorDetails: errors.slice(0, 10), // Return first 10 errors
      data: importedVoters     //   importedVotersdata: importedVoters  or  data: importedVoters
    });

  } 
  catch (error) {
    console.error('Error importing voters:', error);
    // Clean up file on error
    // if (req.file && fs.existsSync(req.file.path)) {     //....new added.     need some +changes
    //   fs.unlinkSync(req.file.path);
    // }
    res.status(500).json({ message: 'Import failed', error: error.message });    ///.... check
  }
});   //....new added  }


// Export voters to Excel (Admin/Super Admin only)
router.get('/export/excel', authenticateToken, authorizeRoles('Super Admin', 'Admin'), async (req, res) => {
  try {
    const voters = await Voter.find({}).populate('created_by', 'full_name');
    
    const exportData = voters.map(voter => ({   //.... it decide the export columns format in xlsx.
      'Voter ID': voter.voter_id || '',
      'Full Name': voter.full_name,
      'Age': voter.age || '',
      'Gender': voter.gender || '',
      'Father/Husband Name': voter.father_husband_name || '',
      'House No': voter.house_no || '',
      'Category': voter.category || '',  //....new added
      'Caste': voter.caste || '',  //....new added
      'Sub Caste': voter.sub_caste || '', //....new added
      'Sub Sub Caste': voter.sub_sub_caste || '', //....new added
      'Ward/Area': voter.ward_area || '',
      'District': voter.district || '',
      'Taluka': voter.taluka || '',
      'Village': voter.village || '',
      'City': voter.city || '',
      'Mobile Number': voter.mobile_number || '',
      'WhatsApp Number': voter.whatsapp_number || '',
      'Head of House': voter.head_of_house || 0 || '',  //....new added
      'Voter Image': voter.voter_image || '',  //....new added
      'Political Preference': voter.political_preference || '',
      'Party Designation': voter.party_designation || '',  //....new added
      'Occupation': voter.occupation || '',
      'Occupation Subcategory': voter.occupation_subcategory || '',  //....new added
      'Present in City': voter.present_in_city ? 'Yes' : 'No',  //....new added
      'Present City Name': voter.present_city_name || '',  //....new added
      'Date of Birth': voter.date_of_birth ? new Date(voter.date_of_birth).toLocaleDateString() : '',  //....new added dob
      'Booth': voter.booth || '',
      'Is Dead': voter.is_dead ? 'Yes' : 'No',  //....new added
      // 'Caste': voter.caste || '',
      // 'Category': voter.category || '',
      // 'Head of House': voter.head_of_house || 0,
      // 'Family ID': voter.family_id || '',  //....new added
      'Created Date': voter.createdAt ? new Date(voter.createdAt).toLocaleDateString() : '',
      'Created By': voter.created_by?.full_name || ''
    }));

      const XLSX = await import("xlsx");
      const worksheet = XLSX.utils.json_to_sheet(exportData);
      const workbook = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(workbook, worksheet, "Voters");

      const filename = `voters_export_${
        new Date().toISOString().split("T")[0]
      }.xlsx`;
      const filepath = path.join(__dirname, "../uploads", filename);

      XLSX.writeFile(workbook, filepath);

      // Log audit
      await AuditLog.create({
        user_id: req.user._id,
        action: "EXPORT_VOTERS",
        table_name: "voters",
        new_values: {
          exported_count: voters.length,
          filename,
        },
      });

      res.download(filepath, filename, (err) => {
        if (!err) {
          // Clean up file after download
          setTimeout(() => {
            if (fs.existsSync(filepath)) {
              fs.unlinkSync(filepath);
            }
          }, 5000);
        }
      });
    } catch (error) {
      console.error("Error exporting voters:", error);
      res.status(500).json({ message: "Export failed", error: error.message });
    }
  }
);

// CSV/Excel import voter route
router.post(
  "/import",
  authenticateToken,
  authorizeRoles("Super Admin", "Admin"),
  upload.single("file"),
  async (req, res) => {
    try {
      const file = req.file;
      if (!file) {
        return res.status(400).json({ error: "No file uploaded" });
      }

      const ext = path.extname(file.originalname).toLowerCase();
      const filePath = file.path;
      const voters = [];

      const handleInsert = async () => {
        try {
          const insertedVoters = await Voter.insertMany(voters);
          await AuditLog.create({
            user_id: req.user.id,
            action: "Imported Voter List",
            table_name: "Voter",
            new_values: { count: insertedVoters.length },
            ip_address: req.ip,
            user_agent: req.headers["user-agent"],
          });

          fs.unlinkSync(filePath); // Clean up
          return res.status(200).json({
            message: "Voters imported successfully",
            imported_count: insertedVoters.length,
          });
        } catch (err) {
          fs.unlinkSync(filePath);
          return res
            .status(500)
            .json({ error: "Error inserting data", details: err.message });
        }
      };

      if (ext === ".csv") {
        fs.createReadStream(filePath)
          .pipe(csv())
          .on("data", (row) => {
            console.log("Parsed CSV Row:", row);
            voters.push({
              full_name: row.full_name,
              age: parseInt(row.age) || null,
              gender: row.gender,
              father_husband_name: row.father_husband_name,
              house_no: row.house_no,
              category: row.category,
              caste: row.caste,
              sub_caste: row.sub_caste,
              sub_sub_caste: row.sub_sub_caste,
              ward_area: row.ward_area,
              district: row.district,
              taluka: row.taluka,
              village: row.village,
              city: row.city,
              mobile_number: row.mobile_number,
              whatsapp_number: row.whatsapp_number,
              head_of_house: row.head_of_house === "1" ? 1 : '',   ///....new added
              voter_image: row.voter_image,
              political_preference: row.political_preference,
              party_designation: row.party_designation,
              occupation: row.occupation,
              occupation_subcategory: row.occupation_subcategory,
              voter_id: row.voter_id,
              present_in_city: row.present_in_city?.toLowerCase() === "true",
              present_city_name: row.present_city_name,
              date_of_birth: row.date_of_birth
                ? new Date(row.date_of_birth)
                : null,
              booth: row.booth,
              is_dead: row.is_dead?.toLowerCase() === "false",  //....new added  true/false
              created_by: req.user.id,
            });
          })
          .on("end", handleInsert);
      } else {
        fs.unlinkSync(filePath);
        return res
          .status(400)
          .json({ error: "Unsupported file type. Only .csv is allowed." });
      }
    } catch (err) {
      return res
        .status(500)
        .json({ error: "Server error", details: err.message });
    }
  }
);

export default router;









